#Please note all objects have default methods like save() that Django adds automatically; please see the Django 1.5 reference for a full list
#Also, rather than creating my own User model, I used Django's default one which handles complicated aspects password hashing - this allowed me to develop faster and easier

from django.db import models
from django.contrib.auth.models import User
#the above two lines imoport Django's default User model

class Idea(models.Model):
    global_idea_id = models.AutoField(primary_key = True)#I gave the primary key a custom name here rather than letting it be autogenerated like in the Tag object
    user_id = models.ForeignKey(User)#foreign key here to Django's User model
    title = models.CharField(max_length = 30)
    text = models.TextField()
    is_private = models.BooleanField(default = True)
    date_created = models.DateTimeField(auto_now_add = True)
    
    def __unicode__(self):#the __unicode__ methods in all the objects define unicode names for the objects so they have unique identifiers
        return self.title

class Tag(models.Model):
    name = models.CharField(max_length = 15)
    #NB the primary key for this object is autogenerated under the name "id"
    def __unicode__(self):
        return self.name
        
        
class IdeaTag(models.Model):#the IdeaTag object is necessary for normalised database tables - see the Design section in the project document
    global_idea_id = models.ForeignKey(Idea)
    tag_id = models.ForeignKey(Tag)
    
    def __unicode__(self):
        title = unicode(self.global_idea_id.title) + unicode(";") + unicode(self.tag_id.name)
        return (title)
    
    
    
class IdeaLink(models.Model):
    idea1 = models.ForeignKey(Idea, null=True, related_name='idea1')
    idea2 = models.ForeignKey(Idea, null=True, related_name='idea2')#the related name arguments here are to prevent ambiguities in the foreign keys
    tag = models.ForeignKey(Tag)
    
    def __unicode__(self):
        title = unicode(self.idea1) + unicode("-") + unicode(self.idea2) + unicode(";") + unicode(self.tag)
        return (title)
        
    def generateLinkName(self): #this is used to generate unique names for the IdeaLink for use in the routing module
        linkname = str(self.idea1.user_id) + ":" + self.idea1.title + ";" + str(self.idea2.user_id) + ":" + self.idea2.title
        return (linkname)